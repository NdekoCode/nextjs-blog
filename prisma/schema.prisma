// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_URL")
  relationMode = "prisma"
}

// Models


model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  image         String?
  emailVERIFIED DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt()

  accounts Account[]
  sessions Session[]
  posts Post[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String  @unique
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String @unique
  expires    DateTime

  @@id([identifier, token])
}

model Post {
  id      String @id @default(cuid())
  title   String
  content String @db.Text

  authorId String @unique

  slug       String   @unique
  image      String?
  nbViews    Int      @default(0)
  nbComments Int      @default(0)
  createdAt  DateTime @default(now())
  updateAt   DateTime @updatedAt()

  // user #author
  author User @relation(fields:[authorId],references:[id], onDelete:Cascade)
  // comment # comments[]
  @@index([authorId])
  // category # categories
  categorySlug String
  category     Category @relation(fields: [categorySlug], references: [slug])
  @@index([categorySlug])
}

model Category {
  id          String  @id @default(cuid())
  title       String
  slug        String  @unique
  description String?
  image       String?
  posts       Post[]
}